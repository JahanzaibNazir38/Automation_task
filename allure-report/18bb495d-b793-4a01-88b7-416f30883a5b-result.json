{"name": "test_NewPatientRegistrationWeb8", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=108.0.5359.95)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0077F243]\n\t(No symbol) [0x00707FD1]\n\t(No symbol) [0x005FD04D]\n\t(No symbol) [0x005FFD34]\n\t(No symbol) [0x005FFBE5]\n\t(No symbol) [0x005FFE80]\n\t(No symbol) [0x0063269F]\n\t(No symbol) [0x006308CC]\n\t(No symbol) [0x0062E4CB]\n\t(No symbol) [0x0062D164]\n\t(No symbol) [0x006232A6]\n\t(No symbol) [0x0064858C]\n\t(No symbol) [0x00622BFF]\n\t(No symbol) [0x00648804]\n\t(No symbol) [0x0065C9EB]\n\t(No symbol) [0x00648386]\n\t(No symbol) [0x0062163C]\n\t(No symbol) [0x0062269D]\n\tGetHandleVerifier [0x00A19A22+2655074]\n\tGetHandleVerifier [0x00A0CA24+2601828]\n\tGetHandleVerifier [0x00828C0A+619850]\n\tGetHandleVerifier [0x00827830+614768]\n\t(No symbol) [0x007105FC]\n\t(No symbol) [0x00715968]\n\t(No symbol) [0x00715A55]\n\t(No symbol) [0x0072051B]\n\tBaseThreadInitThunk [0x765EFEF9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77A87BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77A87B8E+238]", "trace": "self = <testCases.Dr_iQ.test_PatientRegistrationMobile.Test_PatientRegistrationModuleWeb_Mobile_TC object at 0x0000027C76CAAB90>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"37655e589922ac4d95a4c40cc10d4808\")>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_NewPatientRegistrationWeb8(self, setup):\n        self.logger.info('** Web-End Verification started **')\n    \n        self.driver = setup\n        self.lp = NewPatientRegistrationMobile(self.driver)\n    \n        self.logger.info('** YopMail Verification **')\n    \n        self.lp = NewPatientRegistrationMobile(self.driver)  # Created an Object for Dr iQ Login Class\n        self.driver.maximize_window()\n        self.driver.get('https://yopmail.com/en/')\n        time.sleep(15)\n        self.lp.enterEmailYopmailTC8()\n        time.sleep(20)\n    \n        self.logger.info('** Dr. iQ Web Login **')\n    \n        self.driver.get(self.baseURL)\n        time.sleep(10)\n        self.driver.implicitly_wait(100)\n        self.lp = Login(self.driver)\n    \n        self.lp.setEmail(self.username)\n        self.lp.setPassword(self.password)\n        self.lp.clickLogin()\n        time.sleep(8)\n        self.logger.info('** Logged in --> Patient Registration - Web **')\n    \n    \n        self.lp = NewPatientRegistrationMobile(self.driver)  # Created an Object for Dr iQ Login Class\n        self.driver.implicitly_wait(100)\n        act_title = self.driver.title\n        if act_title == 'Dr. iQ | Dashboard':\n            self.lp.clickPatientRegistrationTile()\n            self.driver.implicitly_wait(150)\n            self.lp.searchPatientReg_TC_08(self.firstNameTC8)\n            self.driver.implicitly_wait(100)\n            self.driver.execute_script(\"window.scrollTo(0,document.body.scrollHeight)\")\n    \n            self.driver.execute_script(\"window.scrollTo(0,document.body.scrollHeight)\")\n    \n            time.sleep(2)\n>           self.lp.clickPatientDetails()\n\ntestCases\\Dr_iQ\\test_PatientRegistrationMobile.py:2092: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageObjects\\Dr_iQ\\NewPatientRegistrationMobPage.py:681: in clickPatientDetails\n    self.driver.find_element(By.XPATH,self.icon_PatientDetails_xpath).click()\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:88: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027C76CAA4A0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77A87BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77A87B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=108.0.5359.95)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0077F243]\nE       \t(No symbol) [0x00707FD1]\nE       \t(No symbol) [0x005FD04D]\nE       \t(No symbol) [0x005FFD34]\nE       \t(No symbol) [0x005FFBE5]\nE       \t(No symbol) [0x005FFE80]\nE       \t(No symbol) [0x0063269F]\nE       \t(No symbol) [0x006308CC]\nE       \t(No symbol) [0x0062E4CB]\nE       \t(No symbol) [0x0062D164]\nE       \t(No symbol) [0x006232A6]\nE       \t(No symbol) [0x0064858C]\nE       \t(No symbol) [0x00622BFF]\nE       \t(No symbol) [0x00648804]\nE       \t(No symbol) [0x0065C9EB]\nE       \t(No symbol) [0x00648386]\nE       \t(No symbol) [0x0062163C]\nE       \t(No symbol) [0x0062269D]\nE       \tGetHandleVerifier [0x00A19A22+2655074]\nE       \tGetHandleVerifier [0x00A0CA24+2601828]\nE       \tGetHandleVerifier [0x00828C0A+619850]\nE       \tGetHandleVerifier [0x00827830+614768]\nE       \t(No symbol) [0x007105FC]\nE       \t(No symbol) [0x00715968]\nE       \t(No symbol) [0x00715A55]\nE       \t(No symbol) [0x0072051B]\nE       \tBaseThreadInitThunk [0x765EFEF9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77A87BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77A87B8E+238]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "e40a916f-1f2f-4384-a217-d13dd1f935e6-attachment.txt", "type": "text/plain"}], "start": 1670499453127, "stop": 1670499556099, "uuid": "8d789730-29c5-47bc-9d3e-110ceba91e12", "historyId": "751ddd996788f03aed46769b00c88aa6", "testCaseId": "91edac2c9e82ab0232cba691bd3705f9", "fullName": "Dr_iQ.test_PatientRegistrationMobile.Test_PatientRegistrationModuleWeb_Mobile_TC#test_NewPatientRegistrationWeb8", "labels": [{"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "Dr_iQ"}, {"name": "suite", "value": "test_PatientRegistrationMobile"}, {"name": "subSuite", "value": "Test_PatientRegistrationModuleWeb_Mobile_TC"}, {"name": "host", "value": "DESKTOP-5K871TD"}, {"name": "thread", "value": "21764-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Dr_iQ.test_PatientRegistrationMobile"}]}