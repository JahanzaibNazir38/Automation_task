{"name": "test_NewPatientRegistrationWeb", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".alert alert-success alert-dismissible\"}\n  (Session info: chrome=108.0.5359.96)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0050F243]\n\t(No symbol) [0x00497FD1]\n\t(No symbol) [0x0038D04D]\n\t(No symbol) [0x003BC0B0]\n\t(No symbol) [0x003BC22B]\n\t(No symbol) [0x003EE612]\n\t(No symbol) [0x003D85D4]\n\t(No symbol) [0x003EC9EB]\n\t(No symbol) [0x003D8386]\n\t(No symbol) [0x003B163C]\n\t(No symbol) [0x003B269D]\n\tGetHandleVerifier [0x007A9A22+2655074]\n\tGetHandleVerifier [0x0079CA24+2601828]\n\tGetHandleVerifier [0x005B8C0A+619850]\n\tGetHandleVerifier [0x005B7830+614768]\n\t(No symbol) [0x004A05FC]\n\t(No symbol) [0x004A5968]\n\t(No symbol) [0x004A5A55]\n\t(No symbol) [0x004B051B]\n\tBaseThreadInitThunk [0x75DDFEF9+25]\n\tRtlGetAppContainerNamedObjectPath [0x776C7BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x776C7B8E+238]", "trace": "self = <testCases.Dr_iQ.test_PatientRegistrationMobileTC11_TC20.Test_PatientRegistrationModuleWeb_Mobile_TC object at 0x000001C939522950>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0150e92c243b70587fa335c4a85a44b5\")>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_NewPatientRegistrationWeb(self, setup):\n    \n        # Reading Variables from Config File\n        self.logger.info('** Web-End Verification started **')\n        self.driver = setup\n    \n        # RegistrationMobile(self.driver)\n        self.driver.maximize_window()\n    \n        self.logger.info('** YopMail Verification **')\n        self.driver.get('https://yopmail.com/en/')\n        time.sleep(5)\n        self.lp = NewPatientRegistrationMobile(self.driver)\n        time.sleep(2)\n        self.lp.enterEmailYopmailTC1()\n        time.sleep(20)\n        # self.lp.verifyButtonEmailYM()\n        # time.sleep(10)\n        # self.driver.browser.find_element_by_xpath('/html/body/div[1]/div/img').send_keys(Keys.CONTROL + 'w')\n        # time.sleep(5)\n    \n        self.logger.info('** Dr. iQ Web Login **')\n    \n        self.driver.get(self.baseURL)\n        self.driver.implicitly_wait(200)\n        self.lp = Login(self.driver)\n        self.lp.setEmail(self.username)\n        self.lp.setPassword(self.password)\n        self.lp.clickLogin()\n        time.sleep(10)\n    \n        self.lp = NewPatientRegistrationMobile(self.driver)  # Created an Object for Dr iQ Login Class\n        self.driver.implicitly_wait(100)\n    \n    \n        self.logger.info('** Logged in --> Patient Registration - Web **')\n    \n        act_title=self.driver.title\n        if act_title=='Dr. iQ | Dashboard':\n            self.lp.clickPatientRegistrationTile()\n            self.driver.implicitly_wait(150)\n            self.lp.searchPatientReg_TC_01(self.firstNameTC1)\n            self.driver.implicitly_wait(100)\n            self.driver.execute_script(\"window.scrollTo(0,document.body.scrollHeight)\")\n            time.sleep(2)\n            # element = self.driver.find_element_by_xpath('//*[@id=\"table1\"]/tbody/tr[1]/td[12]/a/span')\n            # ActionChains(driver).click_and_hold(slider).move_by_offset(horizontal_bar_width/ 4, 0).release().perform()\n            # self.driver.execute_script(\"window.scrollTo(0,document.body)\")\n            # actions = ActionChains(self.driver)\n            # actions.move_to_element(element).perform()\n            self.driver.execute_script(\"window.scrollTo(0,document.body.scrollHeight)\")\n            time.sleep(2)\n            self.lp.clickPatientDetails()\n            time.sleep(4)\n            self.driver.execute_script(\"window.scrollTo(0,document.body.scrollHeight)\")\n            # self.lp.clickApproveButton()\n            self.lp.clickApproveButton1()\n            time.sleep(4)\n            self.lp.clickYesApprovePatient()\n            time.sleep(4)\n            self.lp.verifySuccessMessage()\n            time.sleep(12)\n>           self.lp.CheckApprovedBanner()\n\ntestCases\\Dr_iQ\\test_PatientRegistrationMobileTC11_TC20.py:322: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageObjects\\Dr_iQ\\NewPatientRegistrationMobPageTC11_TC20.py:811: in CheckApprovedBanner\n    banner=self.driver.find_element(By.CLASS_NAME, self.CheckApprovedBanner_class).text\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:856: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C939521D80>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x776C7BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x776C7B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".alert alert-success alert-dismissible\"}\nE         (Session info: chrome=108.0.5359.96)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0050F243]\nE       \t(No symbol) [0x00497FD1]\nE       \t(No symbol) [0x0038D04D]\nE       \t(No symbol) [0x003BC0B0]\nE       \t(No symbol) [0x003BC22B]\nE       \t(No symbol) [0x003EE612]\nE       \t(No symbol) [0x003D85D4]\nE       \t(No symbol) [0x003EC9EB]\nE       \t(No symbol) [0x003D8386]\nE       \t(No symbol) [0x003B163C]\nE       \t(No symbol) [0x003B269D]\nE       \tGetHandleVerifier [0x007A9A22+2655074]\nE       \tGetHandleVerifier [0x0079CA24+2601828]\nE       \tGetHandleVerifier [0x005B8C0A+619850]\nE       \tGetHandleVerifier [0x005B7830+614768]\nE       \t(No symbol) [0x004A05FC]\nE       \t(No symbol) [0x004A5968]\nE       \t(No symbol) [0x004A5A55]\nE       \t(No symbol) [0x004B051B]\nE       \tBaseThreadInitThunk [0x75DDFEF9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x776C7BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x776C7B8E+238]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: NoSuchElementException"}, "attachments": [{"name": "log", "source": "35ad3c9a-ce1b-4181-8df9-24c943b4217b-attachment.txt", "type": "text/plain"}], "start": 1670565998759, "stop": 1670566236746, "uuid": "c57d1936-1aa6-4955-8a67-86f92e7e5485", "historyId": "03c584e3f90af37cb0934a685e72ea4f", "testCaseId": "225d8abc5e50bc4ed47b95f1c293ebc0", "fullName": "Dr_iQ.test_PatientRegistrationMobileTC11_TC20.Test_PatientRegistrationModuleWeb_Mobile_TC#test_NewPatientRegistrationWeb", "labels": [{"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "Dr_iQ"}, {"name": "suite", "value": "test_PatientRegistrationMobileTC11_TC20"}, {"name": "subSuite", "value": "Test_PatientRegistrationModuleWeb_Mobile_TC"}, {"name": "host", "value": "DESKTOP-5K871TD"}, {"name": "thread", "value": "1928-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Dr_iQ.test_PatientRegistrationMobileTC11_TC20"}]}